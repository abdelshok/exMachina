{"ast":null,"code":"var _jsxFileName = \"/Users/abdelshokair/Desktop/files/Speech2Text/client/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css'; // Internal Modules\n\nimport Routes from './routing/Routes'; // Styled components\n\nimport AppComponentWrapper from './styledComponents/AppComponentWrapper';\nimport GlobalTheme from './styledComponents/GlobalTheme';\n\nclass App extends Component {\n  // For now, application is set up to have authenticated in local component state \n  // Might be changed later if we implement some authentication, etc. \n  constructor(props) {\n    super(props);\n    this.state = {\n      isAuthenticated: false\n    };\n  }\n\n  render() {\n    const childProps = {\n      isAuthenticated: this.state.isAuthenticated\n    };\n    return React.createElement(AppComponentWrapper, {\n      GlobalTheme: GlobalTheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Routes, {\n      childProps: childProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass NotApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: null\n    };\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('/express_backend');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI().then(res => this.setState({\n      data: res.express\n    })).catch(err => console.log(err));\n  } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Welcome to React\")), \"// Render the newly fetched data inside of this.state.data\", React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.data));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/abdelshokair/Desktop/files/Speech2Text/client/src/App.js"],"names":["React","Component","Routes","AppComponentWrapper","GlobalTheme","App","constructor","props","state","isAuthenticated","render","childProps","NotApp","data","callBackendAPI","response","fetch","body","json","status","Error","message","componentDidMount","then","res","setState","express","catch","err","console","log","logo"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,OAAO,WAAP,C,CAGA;;AACA,OAAOC,MAAP,MAAmB,kBAAnB,C,CACA;;AACA,OAAOC,mBAAP,MAAgC,wCAAhC;AACA,OAAOC,WAAP,MAAwB,gCAAxB;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAE1B;AACA;AACAK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE;AADN,KAAb;AAGD;;AAGDC,EAAAA,MAAM,GAAI;AAER,UAAMC,UAAU,GAAG;AACjBF,MAAAA,eAAe,EAAE,KAAKD,KAAL,CAAWC;AADX,KAAnB;AAIA,WACE,oBAAC,mBAAD;AAAqB,MAAA,WAAW,EAAEL,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,UAAU,EAAEO,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAvByB;;AA6B5B,MAAMC,MAAN,SAAqBZ,KAAK,CAACC,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACrCO,KADqC,GAC7B;AACJK,MAAAA,IAAI,EAAE;AADF,KAD6B;;AAAA,SAYnCC,cAZmC,GAYlB,YAAY;AAC3B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AACD;;AACD,aAAOJ,IAAP;AACD,KApBkC;AAAA;;AAKnCK,EAAAA,iBAAiB,GAAG;AAChB;AACF,SAAKR,cAAL,GACGS,IADH,CACQC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEZ,MAAAA,IAAI,EAAEW,GAAG,CAACE;AAAZ,KAAd,CADf,EAEGC,KAFH,CAESC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFhB;AAGD,GAVkC,CAWjC;;;AAWFlB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,EAAEqB,IAAV;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF,CADF,gEAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0B,KAAKvB,KAAL,CAAWK,IAArC,CANF,CADF;AAUD;;AAjCkC;;AAoCrC,eAAeR,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n// Internal Modules\nimport Routes from './routing/Routes';\n// Styled components\nimport AppComponentWrapper from './styledComponents/AppComponentWrapper';\nimport GlobalTheme from './styledComponents/GlobalTheme';\n\nclass App extends Component {\n  \n  // For now, application is set up to have authenticated in local component state \n  // Might be changed later if we implement some authentication, etc. \n  constructor(props) {\n    super(props);\n    this.state = {\n      isAuthenticated: false,\n    }\n  }\n \n\n  render () {\n\n    const childProps = {\n      isAuthenticated: this.state.isAuthenticated,\n    };\n\n    return (\n      <AppComponentWrapper GlobalTheme={GlobalTheme}>\n        <Routes childProps={childProps} />\n      </AppComponentWrapper>\n    );\n  }\n\n\n}\n\n\nclass NotApp extends React.Component {\nstate = {\n    data: null\n  };\n\n  componentDidMount() {\n      // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('/express_backend');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        // Render the newly fetched data inside of this.state.data \n        <p className=\"App-intro\">{this.state.data}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}